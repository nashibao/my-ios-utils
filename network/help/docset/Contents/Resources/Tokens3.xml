<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/NANetworkGCDHelper.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/NANetworkGCDHelper</TokenIdentifier>
			<Abstract type="html">GCDを利用したNetwork用ヘルパー</Abstract>
			<DeclaredIn>NANetworkGCDHelper.h</DeclaredIn>
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NANetworkGCDHelper/sendAsynchronousRequest:returnEncoding:returnMain:successHandler:errorHandler:</TokenIdentifier>
			<Abstract type="html">非同期リクエスト without json</Abstract>
			<DeclaredIn>NANetworkGCDHelper.h</DeclaredIn>			
			
			<Declaration>+ (void)sendAsynchronousRequest:(NSURLRequest *)request returnEncoding:(NSStringEncoding)returnEncoding returnMain:(BOOL)returnMain successHandler:(void ( ^ ) ( NSURLResponse *resp , id data ))successHandler errorHandler:(void ( ^ ) ( NSURLResponse *resp , NSError *err ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">リクエスト</Abstract>
				</Parameter><Parameter>
					<Name>returnEncoding</Name>
					<Abstract type="html">返り値のエンコーディング．</Abstract>
				</Parameter><Parameter>
					<Name>returnMain</Name>
					<Abstract type="html">メインスレッドで返ってくるかどうか</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">成功時コールバック</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">失敗時コールバック</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendAsynchronousRequest:returnEncoding:returnMain:successHandler:errorHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NANetworkGCDHelper/sendJsonAsynchronousRequest:jsonOption:returnEncoding:returnMain:successHandler:errorHandler:</TokenIdentifier>
			<Abstract type="html">json request wrapper</Abstract>
			<DeclaredIn>NANetworkGCDHelper.h</DeclaredIn>			
			
			<Declaration>+ (void)sendJsonAsynchronousRequest:(NSURLRequest *)request jsonOption:(NSJSONReadingOptions)jsonOption returnEncoding:(NSStringEncoding)returnEncoding returnMain:(BOOL)returnMain successHandler:(void ( ^ ) ( NSURLResponse *resp , id data ))successHandler errorHandler:(void ( ^ ) ( NSURLResponse *resp , NSError *err ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">リクエスト</Abstract>
				</Parameter><Parameter>
					<Name>jsonOption</Name>
					<Abstract type="html">jsonのoption NSJSONReadingOptions</Abstract>
				</Parameter><Parameter>
					<Name>returnEncoding</Name>
					<Abstract type="html">返り値のエンコーディング．</Abstract>
				</Parameter><Parameter>
					<Name>returnMain</Name>
					<Abstract type="html">メインスレッドで返ってくるかどうか</Abstract>
				</Parameter><Parameter>
					<Name>successHandler</Name>
					<Abstract type="html">成功時コールバック</Abstract>
				</Parameter><Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">失敗時コールバック</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendJsonAsynchronousRequest:jsonOption:returnEncoding:returnMain:successHandler:errorHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/NANetworkGCDHelper/setGlobalErrorHandler:</TokenIdentifier>
			<Abstract type="html">グローバルなエラーハンドラ</Abstract>
			<DeclaredIn>NANetworkGCDHelper.h</DeclaredIn>			
			
			<Declaration>+ (void)setGlobalErrorHandler:(void ( ^ ) ( NSURLResponse *resp , NSError *err ))errorHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>errorHandler</Name>
					<Abstract type="html">エラーハンドラ</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setGlobalErrorHandler:</Anchor>
		</Token>
		
	</File>
</Tokens>